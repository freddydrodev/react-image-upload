{"version":3,"sources":["/Users/drofreddyjuniordiomande/.libs/npm/react-image-upload/dist/index.js","../src/index.tsx","../src/ReactImagePicker.tsx","../src/styles.ts","../src/uploadImage.ts"],"names":["ne","Object","create","S","defineProperty","le","getOwnPropertyDescriptor","ce","getOwnPropertyNames","me","getPrototypeOf","ge","prototype","hasOwnProperty","pe","e","a","r","get","enumerable","U","m","s","call","B","__esModule","value","de","index_exports","__export","ReactImagePicker","default","index_default","uploadImage","module","exports","__toCommonJS","React","require","import_dropzone","import_react_dropzone","import_react","Container","d","styled","padding","boxSizing","width","display","flexDirection","border","borderRadius","backgroundColor","DropzoneContainer","gap","variants","isDisabled","true","cursor","false","Title","fontWeight","fontSize","lineHeight","textAlign","margin","marginTop","Description","Message","color","hasError","ImageGrid","maxHeight","gridTemplateColumns","gridColumns","defaultVariants","ImageContainer","position","height","overflow","objectFit","singleImage","maxWidth","DeleteButton","alignItems","justifyContent","boxShadow","Overlay","zIndex","top","left","backdropFilter","transition","opacity","X","Dropzone","autoDiscover","getRuleValueAndMessage","rule","message","DEFAULT_RULES","maxSize","maxFiles","accepted","validateFile","file","rules","maxSizeMessage","acceptedMessage","size","toFixed","acceptedTypes","Array","isArray","map","type","toLowerCase","fileExtension","name","split","pop","fileType","some","startsWith","join","images","onImagesChanged","label","description","validate","deleteIcon","deleteBtnColor","deleteIconColor","renderImage","hideTitle","sectionGap","imageGap","imageGridCount","imageBorderRadius","style","className","props","maxFilesMessage","t","useState","files","setFiles","validationMessage","setValidationMessage","isValidating","setIsValidating","useEffect","result","error","Error","Y","useDropzone","accept","reduce","acc","minSize","multiple","onDropRejected","fileRejections","event","errors","rejection","code","console","log","uniqueErrors","filter","index","self","indexOf","onDrop","acceptedFiles","length","validationErrors","newList","assign","preview","URL","createObjectURL","_file","getRootProps","getInputProps","processedFiles","File","forEach","revokeObjectURL","reachedLimit","createElement","src","imgProps","alt","key","onClick","_files","f","stopPropagation","DeleteIcon","xmlns","fill","viewBox","import_storage","storage","isProd","path","_path","fullPath","storageRef","uploadTask","endsWith","slice","trim","b","ref","uploadBytesResumable","getDownloadURL","snapshot"],"mappings":"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","sourcesContent":["\"use strict\";var ne=Object.create;var S=Object.defineProperty;var le=Object.getOwnPropertyDescriptor;var ce=Object.getOwnPropertyNames;var me=Object.getPrototypeOf,ge=Object.prototype.hasOwnProperty;var pe=(e,a)=>{for(var r in a)S(e,r,{get:a[r],enumerable:!0})},U=(e,a,r,m)=>{if(a&&typeof a==\"object\"||typeof a==\"function\")for(let s of ce(a))!ge.call(e,s)&&s!==r&&S(e,s,{get:()=>a[s],enumerable:!(m=le(a,s))||m.enumerable});return e};var B=(e,a,r)=>(r=e!=null?ne(me(e)):{},U(a||!e||!e.__esModule?S(r,\"default\",{value:e,enumerable:!0}):r,e)),de=e=>U(S({},\"__esModule\",{value:!0}),e);var ye={};pe(ye,{ReactImagePicker:()=>E,default:()=>he,uploadImage:()=>xe});module.exports=de(ye);var t=B(require(\"react\")),X=B(require(\"dropzone\")),Y=require(\"react-dropzone\");var d=require(\"@stitches/react\"),H=(0,d.styled)(\"div\",{padding:\"20px\",boxSizing:\"border-box\",width:400,display:\"flex\",flexDirection:\"column\",border:\"1px dashed #e0e0e0\",borderRadius:\"15px\",backgroundColor:\"rgba(0, 0, 0, 0.015)\"}),W=(0,d.styled)(\"div\",{display:\"flex\",flexDirection:\"column\",gap:\"15px\",border:0,padding:0,variants:{isDisabled:{true:{cursor:\"auto\"},false:{cursor:\"pointer\"}}}}),G=(0,d.styled)(\"h2\",{fontWeight:700,fontSize:\"2rem\",lineHeight:\"1em\",textAlign:\"center\",margin:0,marginTop:\"15px\"}),N=(0,d.styled)(\"p\",{fontWeight:500,fontSize:\"1rem\",lineHeight:\"1.3em\",textAlign:\"center\",margin:0}),_=(0,d.styled)(\"p\",{fontSize:\"0.75rem\",lineHeight:\"1.66\",textAlign:\"center\",margin:0,color:\"rgba(0, 0, 0, 0.5)\",variants:{hasError:{true:{color:\"#d32f2f\",fontSize:\"0.8rem\"},false:{color:\"inherit\"}}}}),q=(0,d.styled)(\"div\",{display:\"grid\",maxHeight:380,gridTemplateColumns:\"repeat(var(--grid-columns, 3), 1fr)\",gap:\"var(--image-gap, 10px)\",variants:{gridColumns:{value:{\"--grid-columns\":\"var(--grid-columns-value, 3)\",\"--image-gap\":\"var(--image-gap-value, 10px)\"}}},defaultVariants:{gridColumns:\"value\"}}),J=(0,d.styled)(\"div\",{position:\"relative\",width:\"100%\",height:\"100%\",borderRadius:\"var(--image-border-radius-value, 15px)\",overflow:\"hidden\",\"& img\":{width:\"100%\",height:\"100%\",objectFit:\"cover\",borderRadius:\"var(--image-border-radius-value, 15px)\"},variants:{singleImage:{true:{maxWidth:\"400px\",margin:\"0 auto\"}}}}),K=(0,d.styled)(\"button\",{width:32,height:32,borderRadius:\"50%\",border:\"none\",cursor:\"pointer\",display:\"flex\",alignItems:\"center\",justifyContent:\"center\",padding:0,boxShadow:\"none\",variants:{color:{default:{backgroundColor:\"#f44336\",color:\"#ffffff\"}}}}),Q=(0,d.styled)(\"div\",{display:\"flex\",alignItems:\"center\",justifyContent:\"center\",width:\"100%\",height:\"100%\",borderRadius:\"15px\",zIndex:10,position:\"absolute\",top:0,left:0,backgroundColor:\"rgba(255,255,255,0)\",backdropFilter:\"blur(0)\",transition:\"all linear 0.25s\",opacity:0,\"&:hover\":{backgroundColor:\"rgba(255,255,255,0.25)\",backdropFilter:\"blur(5px)\",opacity:1}});X.default.autoDiscover=!1;var z=e=>e?typeof e==\"object\"&&\"value\"in e?{value:e.value,message:e.message}:{value:e}:{value:void 0},ue={maxSize:{value:5*1024*1024,message:\"File size must be less than 5MB\"},maxFiles:{value:1,message:\"Maximum 1 file allowed\"},accepted:{value:\"image/*\",message:\"Only image files are accepted\"}},fe=(e,a)=>{let{value:r,message:m}=z(a.maxSize),{value:s,message:f}=z(a.accepted);if(r&&e.size>r)return m??`File size must be less than ${(r/(1024*1024)).toFixed(1)}MB`;if(s){let h=Array.isArray(s)?s.map(v=>v.toLowerCase()):[s.toLowerCase()],R=`.${e.name.split(\".\").pop()?.toLowerCase()}`,C=e.type.toLowerCase();if(!h.some(v=>v===\"image/*\"?C.startsWith(\"image/\"):v===R||v===C))return f??`File type not accepted. Accepted types: ${h.join(\", \")}`}return null},E=({images:e=[],onImagesChanged:a,rules:r=ue,label:m=\"Images\",description:s,validate:f,deleteIcon:h,deleteBtnColor:R=\"#f44336\",deleteIconColor:C=\"#ffffff\",renderImage:M,hideTitle:v=!1,sectionGap:be=\"15px\",imageGap:Z=\"10px\",imageGridCount:L=3,imageBorderRadius:ee=\"15px\",style:te,className:ae,message:j,hasError:k=!1,...Re})=>{let{value:n,message:D}=z(r.maxFiles),{value:V,message:re}=z(r.maxSize),{value:x}=z(r.accepted),[g,T]=t.useState(e),[A,w]=t.useState(null),[ie,P]=t.useState(!1);t.useEffect(()=>{if(!f)return;(async()=>{P(!0);try{let o=await f(g);w(o)}catch(o){w(o instanceof Error?o.message:\"Validation failed\")}finally{P(!1)}})()},[g,f]);let{getRootProps:oe,getInputProps:se}=(0,Y.useDropzone)({accept:x?typeof x==\"string\"?{[x]:[]}:x.reduce((i,o)=>({...i,[o]:[]}),{}):{\"image/*\":[]},minSize:0,maxSize:V,maxFiles:n,multiple:n!==1,onDropRejected(i,o){let l=i.map(p=>{let y=p.file,u=p.errors[0];return u.code===\"file-too-large\"?re??`${y.name} is too large. Maximum size is ${(V/1048576).toFixed(1)}MB`:u.code===\"file-invalid-type\"?`${y.name} has an invalid type`:u.code===\"too-many-files\"?D??`Maximum ${n} file${n===1?\"\":\"s\"} allowed`:u.message});console.log(\"ERRORS REJECTED =>\",l);let c=l.filter((p,y,u)=>u.indexOf(p)===y);w(c.join(`\n`))},onDrop:i=>{if(n&&g.length+i.length>n){w(D??`Maximum ${n} file${n===1?\"\":\"s\"} allowed`);return}let o=i.map(c=>fe(c,r)).filter(c=>c!==null);if(console.log(\"ERRORS =>\",o),o.length>0){w(o.join(`\n`));return}let l=[...g,...i.map(c=>Object.assign(c,{preview:URL.createObjectURL(c)})).filter(c=>g.filter(p=>typeof p==\"string\"?!1:p.name===c.name).length===0)];T(l),a&&a(l)}});t.useEffect(()=>{let i=e.map(o=>o instanceof File?Object.assign(o,{preview:URL.createObjectURL(o)}):o);T(i)},[e]),t.useEffect(()=>()=>{g.forEach(i=>URL.revokeObjectURL(i.preview))},[g]);let I=n?g.length>=n:!1,O=`repeat(${L}, 1fr)`,F=115;return n===1&&(O=\"1fr\",F=200),n===2&&(O=\"1fr 1fr\",F=175),t.createElement(H,{className:ae,style:te},t.createElement(W,{...I?{}:oe({className:\"dropzone\"}),isDisabled:I},t.createElement(\"input\",{...se()}),!v&&t.createElement(G,null,m),t.createElement(N,null,s??\"Vous pouvez ajouter les images en cliquant ici.\"),t.createElement(q,{gridColumns:\"value\",style:{\"--grid-columns-value\":L,\"--image-gap-value\":Z,\"--image-border-radius-value\":ee}},g.map(i=>{let l=typeof i==\"string\"?{name:i,preview:i}:i,c=typeof l==\"string\"?l:l.preview,p={src:c,width:F,height:F,style:{objectFit:\"cover\",...n===1?{}:{width:\"100%\",height:\"100%\"}},alt:typeof l==\"string\"?l:l.name};return t.createElement(J,{key:c,singleImage:n===1},M?M(p):t.createElement(\"img\",{...p}),t.createElement(Q,null,t.createElement(K,{color:\"default\",onClick:y=>{let u=[...g.filter($=>(typeof $==\"string\"?$:$.name)!==l.name)];T(u),a(u),y.stopPropagation()}},h??t.createElement(ve,null))))})),t.createElement(_,{hasError:!!A||I||k},k?j??\"An error occurred\":ie?\"Validating...\":A||(I?D??`Maximum ${n} files allowed`:j??`Files up to ${(V??5*1024*1024)/(1024*1024)}MB, max ${n} files, accepted formats: ${Array.isArray(x)?x.join(\", \"):x}`))))},ve=()=>t.createElement(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:\"16\",height:\"16\",fill:\"currentColor\",className:\"bi bi-trash\",viewBox:\"0 0 16 16\"},t.createElement(\"path\",{d:\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z\"}),t.createElement(\"path\",{d:\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z\"}));var b=require(\"firebase/storage\"),xe=async({file:e,storage:a,isProd:r=!1,path:m=\"Images\"})=>{if(typeof e==\"string\")return e;let s=m.endsWith(\"/\")?m.slice(0,-1):m;s.trim().length||(s=\"Images\");let f=`${r?\"\":\"DEV/\"}${s}/${e.name}`,h=(0,b.ref)(a,f),R=(0,b.uploadBytesResumable)(h,e);return await R,await(0,b.getDownloadURL)(R.snapshot.ref)};var he=E;0&&(module.exports={ReactImagePicker,uploadImage});\n","import { ReactImagePicker } from \"./ReactImagePicker\";\n\nexport * from \"./types\";\n\nexport * from \"./uploadImage\";\n\nexport default ReactImagePicker;\n\nexport * from \"./ReactImagePicker\";\n","import * as React from \"react\";\nimport Dropzone from \"dropzone\";\nimport { useDropzone } from \"react-dropzone\";\nimport {\n  renderImageType,\n  ReactImagePickerProps,\n  FileValidationRules,\n  RuleWithMessage,\n} from \"./types\";\nimport { styled } from \"@stitches/react\";\nimport {\n  Container,\n  DropzoneContainer,\n  Title,\n  Description,\n  ImageGrid,\n  ImageContainer,\n  DeleteButton,\n  Overlay,\n  Message,\n} from \"./styles\";\n\nDropzone.autoDiscover = false;\n\n/**\n * Helper function to get rule value and message\n */\nconst getRuleValueAndMessage = <T,>(\n  rule: RuleWithMessage<T> | undefined\n): { value: T | undefined; message?: string } => {\n  if (!rule) return { value: undefined };\n  if (typeof rule === \"object\" && \"value\" in rule) {\n    return { value: rule.value, message: rule.message };\n  }\n  return { value: rule };\n};\n\n/**\n * Default validation rules\n */\nconst DEFAULT_RULES: FileValidationRules = {\n  maxSize: {\n    value: 5 * 1024 * 1024,\n    message: \"File size must be less than 5MB\",\n  },\n  maxFiles: { value: 1, message: \"Maximum 1 file allowed\" },\n  accepted: { value: \"image/*\", message: \"Only image files are accepted\" },\n};\n\n/**\n * Validates a file against the provided rules\n */\nconst validateFile = (\n  file: File,\n  rules: FileValidationRules\n): string | null => {\n  const { value: maxSize, message: maxSizeMessage } = getRuleValueAndMessage(\n    rules.maxSize\n  );\n  const { value: accepted, message: acceptedMessage } = getRuleValueAndMessage(\n    rules.accepted\n  );\n\n  // Check file size\n  if (maxSize && file.size > maxSize) {\n    return (\n      maxSizeMessage ??\n      `File size must be less than ${(maxSize / (1024 * 1024)).toFixed(1)}MB`\n    );\n  }\n\n  // Check file type\n  if (accepted) {\n    const acceptedTypes = Array.isArray(accepted)\n      ? accepted.map((type) => type.toLowerCase())\n      : [accepted.toLowerCase()];\n\n    const fileExtension = `.${file.name.split(\".\").pop()?.toLowerCase()}`;\n    const fileType = file.type.toLowerCase();\n\n    const isAccepted = acceptedTypes.some((type) => {\n      if (type === \"image/*\") {\n        return fileType.startsWith(\"image/\");\n      }\n      return type === fileExtension || type === fileType;\n    });\n\n    if (!isAccepted) {\n      return (\n        acceptedMessage ??\n        `File type not accepted. Accepted types: ${acceptedTypes.join(\", \")}`\n      );\n    }\n  }\n\n  return null;\n};\n\n/**\n * A React component for selecting and displaying images using a drag-and-drop interface.\n *\n * @param {Object} props - The component props.\n * @param {(File | string)[]} [props.images] - Initial images to display.\n * @param {(images: (File | string)[]) => void} props.onImagesChanged - Callback triggered when the image list changes.\n * @param {FileValidationRules} [props.rules] - Validation rules for the images.\n * @param {string} [props.label] - The label displayed for the image picker.\n * @param {string} [props.description] - Additional text to describe the image picker.\n * @param {boolean} [props.validate] - Flag to indicate if the image picker is in a valid state.\n * @param {React.ReactNode} [props.deleteIcon] - Custom delete icon to be used.\n * @param {string} [props.deleteBtnColor=\"#f44336\"] - Color of the delete button.\n * @param {string} [props.deleteIconColor=\"#ffffff\"] - Color of the delete icon.\n * @param {(props: renderImageType) => React.ReactNode} [props.renderImage] - Custom component to render images.\n * @param {boolean} [props.hideTitle=false] - Flag to hide the title.\n * @param {string} [props.sectionGap=\"15px\"] - Gap between sections (ex: title, description, images, etc...) in pixels.\n * @param {string} [props.imageGap=\"10px\"] - Gap between images in pixels.\n * @param {number} [props.imageGridCount=3] - The number of images to display in the grid.\n * @param {string} [props.imageBorderRadius=\"15px\"] - The border radius of the images.\n * @returns {JSX.Element} The ReactImagePicker component.\n */\nexport const ReactImagePicker: React.FC<ReactImagePickerProps> = ({\n  images = [],\n  onImagesChanged,\n  rules = DEFAULT_RULES,\n  label = \"Images\",\n  description,\n  validate,\n  deleteIcon,\n  deleteBtnColor = \"#f44336\",\n  deleteIconColor = \"#ffffff\",\n  renderImage,\n  hideTitle = false,\n  sectionGap = \"15px\",\n  imageGap = \"10px\",\n  imageGridCount = 3,\n  imageBorderRadius = \"15px\",\n  style,\n  className,\n  message,\n  hasError = false,\n  ...props\n}) => {\n  const { value: maxFiles, message: maxFilesMessage } = getRuleValueAndMessage(\n    rules.maxFiles\n  );\n  const { value: maxSize, message: maxSizeMessage } = getRuleValueAndMessage(\n    rules.maxSize\n  );\n  const { value: accepted } = getRuleValueAndMessage(rules.accepted);\n\n  /**\n   * IMAGES SELECTED BY THE USER\n   */\n  const [files, setFiles] = React.useState<(File | string)[]>(images);\n  const [validationMessage, setValidationMessage] = React.useState<\n    string | null\n  >(null);\n  const [isValidating, setIsValidating] = React.useState(false);\n\n  /**\n   * Handle validation\n   */\n  React.useEffect(() => {\n    if (!validate) return;\n\n    const validateImages = async () => {\n      setIsValidating(true);\n      try {\n        const result = await validate(files);\n        setValidationMessage(result);\n      } catch (error) {\n        setValidationMessage(\n          error instanceof Error ? error.message : \"Validation failed\"\n        );\n      } finally {\n        setIsValidating(false);\n      }\n    };\n\n    validateImages();\n  }, [files, validate]);\n\n  const { getRootProps, getInputProps } = useDropzone({\n    accept: accepted\n      ? typeof accepted === \"string\"\n        ? { [accepted]: [] }\n        : accepted.reduce((acc, type) => ({ ...acc, [type]: [] }), {})\n      : { \"image/*\": [] },\n    minSize: 0,\n    maxSize: maxSize,\n    maxFiles: maxFiles,\n    multiple: maxFiles === 1 ? false : true,\n    onDropRejected(fileRejections, event) {\n      const errors = fileRejections.map((rejection) => {\n        const file = rejection.file;\n        const error = rejection.errors[0];\n\n        if (error.code === \"file-too-large\") {\n          return (\n            maxSizeMessage ??\n            `${file.name} is too large. Maximum size is ${(\n              maxSize! /\n              (1024 * 1024)\n            ).toFixed(1)}MB`\n          );\n        }\n\n        if (error.code === \"file-invalid-type\") {\n          return `${file.name} has an invalid type`;\n        }\n\n        if (error.code === \"too-many-files\") {\n          return (\n            maxFilesMessage ??\n            `Maximum ${maxFiles} file${maxFiles === 1 ? \"\" : \"s\"} allowed`\n          );\n        }\n\n        return error.message;\n      });\n\n      console.log(\"ERRORS REJECTED =>\", errors);\n\n      const uniqueErrors = errors.filter(\n        (error, index, self) => self.indexOf(error) === index\n      );\n\n      setValidationMessage(uniqueErrors.join(\"\\n\"));\n    },\n    onDrop: (acceptedFiles) => {\n      // Check if adding these files would exceed the maximum\n      if (maxFiles && files.length + acceptedFiles.length > maxFiles) {\n        setValidationMessage(\n          maxFilesMessage ??\n            `Maximum ${maxFiles} file${maxFiles === 1 ? \"\" : \"s\"} allowed`\n        );\n        return;\n      }\n\n      // Validate each file against rules\n      const validationErrors = acceptedFiles\n        .map((file) => validateFile(file, rules))\n        .filter((error): error is string => error !== null);\n\n      console.log(\"ERRORS =>\", validationErrors);\n\n      if (validationErrors.length > 0) {\n        setValidationMessage(validationErrors.join(\"\\n\"));\n        return;\n      }\n\n      const newList = [\n        ...files,\n        ...acceptedFiles\n          .map((file) =>\n            Object.assign(file, {\n              preview: URL.createObjectURL(file),\n            })\n          )\n          .filter(\n            (file) =>\n              files.filter((_file: File | string) => {\n                if (typeof _file === \"string\") return false;\n                return _file.name === file.name;\n              }).length === 0\n          ),\n      ];\n\n      /**\n       * CHANGE THE LOCAL VERSION OF THE IMAGES\n       */\n      setFiles(newList);\n\n      /**\n       * CHANGE THE PARENT VERSION TOO\n       */\n      if (onImagesChanged) {\n        onImagesChanged(newList);\n      }\n    },\n  });\n\n  /**\n   * Handle initial File objects by creating preview URLs\n   */\n  React.useEffect(() => {\n    const processedFiles = images.map((file) => {\n      if (file instanceof File) {\n        return Object.assign(file, {\n          preview: URL.createObjectURL(file),\n        });\n      }\n      return file;\n    });\n    setFiles(processedFiles);\n  }, [images]);\n\n  /**\n   * USED FOR PERFORMANCE\n   */\n  React.useEffect(\n    () => () => {\n      // Make sure to revoke the data uris to avoid memory leaks\n      files.forEach((file) => URL.revokeObjectURL((file as any).preview));\n    },\n    [files]\n  );\n\n  const reachedLimit = maxFiles ? files.length >= maxFiles : false;\n\n  let gridTemplateColumns = `repeat(${imageGridCount}, 1fr)`;\n\n  let size = 115;\n\n  if (maxFiles === 1) {\n    gridTemplateColumns = \"1fr\";\n    size = 200;\n  }\n\n  if (maxFiles === 2) {\n    gridTemplateColumns = \"1fr 1fr\";\n    size = 175;\n  }\n\n  return (\n    <Container className={className} style={style}>\n      <DropzoneContainer\n        {...(!reachedLimit ? getRootProps({ className: \"dropzone\" }) : {})}\n        isDisabled={reachedLimit}\n      >\n        <input {...getInputProps()} />\n        {!hideTitle && <Title>{label}</Title>}\n        <Description>\n          {description ?? \"Vous pouvez ajouter les images en cliquant ici.\"}\n        </Description>\n\n        <ImageGrid\n          gridColumns=\"value\"\n          style={\n            {\n              \"--grid-columns-value\": imageGridCount,\n              \"--image-gap-value\": imageGap,\n              \"--image-border-radius-value\": imageBorderRadius,\n            } as React.CSSProperties\n          }\n        >\n          {files.map((file) => {\n            const fileIsString = typeof file === \"string\";\n\n            const _file = fileIsString\n              ? { name: file as string, preview: file as string }\n              : (file as File);\n\n            const src =\n              typeof _file === \"string\" ? _file : (_file as any).preview;\n\n            const imgProps: renderImageType = {\n              src: src,\n              width: size,\n              height: size,\n              style: {\n                objectFit: \"cover\",\n                ...(maxFiles === 1 ? {} : { width: \"100%\", height: \"100%\" }),\n              },\n              alt: typeof _file === \"string\" ? _file : (_file as any).name,\n            };\n\n            return (\n              <ImageContainer key={src} singleImage={maxFiles === 1}>\n                {renderImage ? renderImage(imgProps) : <img {...imgProps} />}\n                <Overlay>\n                  <DeleteButton\n                    color=\"default\"\n                    onClick={(e) => {\n                      const _files = [\n                        ...files.filter((f) => {\n                          const isString = typeof f === \"string\";\n                          const name = isString\n                            ? (f as string)\n                            : (f as File).name;\n\n                          return name !== _file.name;\n                        }),\n                      ];\n\n                      setFiles(_files);\n\n                      onImagesChanged(_files);\n\n                      e.stopPropagation();\n                    }}\n                  >\n                    {deleteIcon ?? <DeleteIcon />}\n                  </DeleteButton>\n                </Overlay>\n              </ImageContainer>\n            );\n          })}\n        </ImageGrid>\n        <Message hasError={!!validationMessage || reachedLimit || hasError}>\n          {hasError\n            ? message ?? \"An error occurred\"\n            : isValidating\n            ? \"Validating...\"\n            : validationMessage ||\n              (reachedLimit\n                ? maxFilesMessage ?? `Maximum ${maxFiles} files allowed`\n                : message ??\n                  `Files up to ${\n                    (maxSize ?? 5 * 1024 * 1024) / (1024 * 1024)\n                  }MB, max ${maxFiles} files, accepted formats: ${\n                    Array.isArray(accepted) ? accepted.join(\", \") : accepted\n                  }`)}\n        </Message>\n      </DropzoneContainer>\n    </Container>\n  );\n};\n\nconst DeleteIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    fill=\"currentColor\"\n    className=\"bi bi-trash\"\n    viewBox=\"0 0 16 16\"\n  >\n    <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z\" />\n    <path d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z\" />\n  </svg>\n);\n","import { styled } from \"@stitches/react\";\n\nexport const Container = styled(\"div\", {\n  padding: \"20px\",\n  boxSizing: \"border-box\",\n  width: 400,\n  display: \"flex\",\n  flexDirection: \"column\",\n  border: \"1px dashed #e0e0e0\",\n  borderRadius: \"15px\",\n  backgroundColor: \"rgba(0, 0, 0, 0.015)\",\n});\n\nexport const DropzoneContainer = styled(\"div\", {\n  display: \"flex\",\n  flexDirection: \"column\",\n  gap: \"15px\",\n  border: 0,\n  padding: 0,\n  variants: {\n    isDisabled: {\n      true: { cursor: \"auto\" },\n      false: { cursor: \"pointer\" },\n    },\n  },\n});\n\nexport const Title = styled(\"h2\", {\n  fontWeight: 700,\n  fontSize: \"2rem\",\n  lineHeight: \"1em\",\n  textAlign: \"center\",\n  margin: 0,\n  marginTop: \"15px\",\n});\n\nexport const Description = styled(\"p\", {\n  fontWeight: 500,\n  fontSize: \"1rem\",\n  lineHeight: \"1.3em\",\n  textAlign: \"center\",\n  margin: 0,\n});\n\nexport const Message = styled(\"p\", {\n  fontSize: \"0.75rem\",\n  lineHeight: \"1.66\",\n  textAlign: \"center\",\n  margin: 0,\n  color: \"rgba(0, 0, 0, 0.5)\",\n  variants: {\n    hasError: {\n      true: { color: \"#d32f2f\", fontSize: \"0.8rem\" },\n      false: { color: \"inherit\" },\n    },\n  },\n});\n\nexport const ImageGrid = styled(\"div\", {\n  display: \"grid\",\n  maxHeight: 380,\n  gridTemplateColumns: \"repeat(var(--grid-columns, 3), 1fr)\",\n  gap: \"var(--image-gap, 10px)\",\n  variants: {\n    gridColumns: {\n      value: {\n        \"--grid-columns\": \"var(--grid-columns-value, 3)\",\n        \"--image-gap\": \"var(--image-gap-value, 10px)\",\n      },\n    },\n  },\n  defaultVariants: {\n    gridColumns: \"value\",\n  },\n});\n\nexport const ImageContainer = styled(\"div\", {\n  position: \"relative\",\n  width: \"100%\",\n  height: \"100%\",\n  borderRadius: \"var(--image-border-radius-value, 15px)\",\n  overflow: \"hidden\",\n  \"& img\": {\n    width: \"100%\",\n    height: \"100%\",\n    objectFit: \"cover\",\n    borderRadius: \"var(--image-border-radius-value, 15px)\",\n  },\n  variants: {\n    singleImage: {\n      true: {\n        maxWidth: \"400px\",\n        margin: \"0 auto\",\n      },\n    },\n  },\n});\n\nexport const DeleteButton = styled(\"button\", {\n  width: 32,\n  height: 32,\n  borderRadius: \"50%\",\n  border: \"none\",\n  cursor: \"pointer\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  padding: 0,\n  boxShadow: \"none\",\n  variants: {\n    color: {\n      default: {\n        backgroundColor: \"#f44336\",\n        color: \"#ffffff\",\n      },\n    },\n  },\n});\n\nexport const Overlay = styled(\"div\", {\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  width: \"100%\",\n  height: \"100%\",\n  borderRadius: \"15px\",\n  zIndex: 10,\n  position: \"absolute\",\n  top: 0,\n  left: 0,\n  backgroundColor: \"rgba(255,255,255,0)\",\n  backdropFilter: \"blur(0)\",\n  transition: \"all linear 0.25s\",\n  opacity: 0,\n  \"&:hover\": {\n    backgroundColor: \"rgba(255,255,255,0.25)\",\n    backdropFilter: \"blur(5px)\",\n    opacity: 1,\n  },\n});\n","import { getDownloadURL, ref, uploadBytesResumable } from \"firebase/storage\";\nimport { UploadImageType } from \"./types\";\n\n/**\n * Uploads a file to Firebase Storage and returns the download URL.\n * @param {File|string} file The file to upload, or the URL of the file\n * @param {FirebaseStorage} storage The Firebase Storage instance\n * @param {boolean} [isProd=false] Whether or not this is a production upload\n * @param {string} [path='Images'] The path to upload the file to\n * @returns {Promise<string>} The download URL of the uploaded file\n */\nexport const uploadImage: UploadImageType = async ({\n  file,\n  storage,\n  isProd = false,\n  path = \"Images\",\n}): Promise<string> => {\n  if (typeof file === \"string\") return file;\n\n  // The path is the full path including the filename, so we'll remove the trailing slash\n  let _path = path.endsWith(\"/\") ? path.slice(0, -1) : path;\n\n  // If the path is empty, we'll default to \"Images\"\n  if (!_path.trim().length) _path = \"Images\";\n\n  // The full path is the path plus the filename\n  const fullPath = `${isProd ? \"\" : \"DEV/\"}${_path}/${file.name}`;\n\n  // Create a reference to the file\n  const storageRef = ref(storage, fullPath);\n\n  // Start the upload\n  const uploadTask = uploadBytesResumable(storageRef, file);\n\n  // Wait for the upload to finish\n  await uploadTask;\n\n  // Get the download URL\n  const url = await getDownloadURL(uploadTask.snapshot.ref);\n\n  // Return the download URL\n  return url;\n};\n"]}