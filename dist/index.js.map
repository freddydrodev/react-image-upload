{"version":3,"sources":["/Users/drofreddyjuniordiomande/.projects/libs/nodejs/react-image-upload/dist/index.js","../src/index.tsx"],"names":["I","Object","create","u","defineProperty","L","getOwnPropertyDescriptor","j","getOwnPropertyNames","D","getPrototypeOf","T","prototype","hasOwnProperty","U","t","i","r","get","enumerable","v","m","p","call","b","__esModule","value","O","src_exports","__export","default","src_default","module","exports","__toCommonJS","React","require","import_dropzone","import_material","import_react_dropzone","import_DeleteOutlineRounded","x","Dropzone","autoDiscover","ReactImageUpload","initImage","onImageChange","maxFiles","label","description","e","useState","files","setFiles","z","useDropzone","accept","minSize","multiple","onDropRejected","fileRejections","event","console","log","multipleText","length","alert","onDrop","acceptedFiles","newList","map","file","assign","preview","URL","createObjectURL","filter","_file","name","getRootProps","getInputProps","useEffect","forEach","revokeObjectURL","reachedLimit","gridTemplateColumns","size","createElement","s","Stack","sx","border","className","spacing","cursor","Typography","fontWeight","fontSize","lineHeight","textAlign","display","gap","src","width","height","borderRadius","overflow","position","margin","key","style","objectFit","alt","alignItems","justifyContent","zIndex","top","left","bgcolor","backdropFilter","transition","opacity","Fab","color","boxShadow","onClick","_files","f","stopPropagation","R","DeleteOutlineRounded","variant"],"mappings":"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","sourcesContent":["\"use strict\";var I=Object.create;var u=Object.defineProperty;var L=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var D=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var U=(t,i)=>{for(var r in i)u(t,r,{get:i[r],enumerable:!0})},v=(t,i,r,m)=>{if(i&&typeof i==\"object\"||typeof i==\"function\")for(let p of j(i))!T.call(t,p)&&p!==r&&u(t,p,{get:()=>i[p],enumerable:!(m=L(i,p))||m.enumerable});return t};var b=(t,i,r)=>(r=t!=null?I(D(t)):{},v(i||!t||!t.__esModule?u(r,\"default\",{value:t,enumerable:!0}):r,t)),O=t=>v(u({},\"__esModule\",{value:!0}),t);var P={};U(P,{default:()=>C});module.exports=O(P);var e=b(require(\"react\")),x=b(require(\"dropzone\")),s=require(\"@mui/material\"),z=require(\"react-dropzone\"),R=b(require(\"@mui/icons-material/DeleteOutlineRounded\"));x.default.autoDiscover=!1;var A=({initImage:t,onImageChange:i,maxFiles:r=5,label:m,description:p})=>{let[a,y]=e.useState(t??[]),{getRootProps:k,getInputProps:w}=(0,z.useDropzone)({accept:{\"image/*\":[]},minSize:1024,maxFiles:r,multiple:r!==1,onDropRejected(n,l){console.log(n,l);let o=n.length>1?\"Fichiers ont \\xE9t\\xE9 r\\xE9fus\\xE9s\":\"Fichier a \\xE9t\\xE9 r\\xE9fus\\xE9\";alert(`${n.length} ${o}.`)},onDrop:n=>{let l=[...a,...n.map(o=>Object.assign(o,{preview:URL.createObjectURL(o)})).filter(o=>a.filter(g=>typeof g==\"string\"?!1:g.name===o.name).length===0)];y(l),i&&i(l)}});e.useEffect(()=>()=>{a.forEach(n=>URL.revokeObjectURL(n.preview))},[a]),console.log(a);let f=a.length>=r,d=\"1fr 1fr 1fr\",c=100;return r===1&&(d=\"1fr\",c=200),r===2&&(d=\"1fr 1fr\",c=160),e.createElement(s.Stack,{sx:{\"& .dropzone\":{border:0,p:0}}},e.createElement(s.Stack,{...f?{}:k({className:\"dropzone\"}),spacing:2,sx:{cursor:f?\"auto\":\"pointer\"}},e.createElement(\"input\",{...w()}),e.createElement(s.Typography,{fontWeight:700,fontSize:\"2rem\",lineHeight:\"1em\",textAlign:\"center\"},m??\"Images\"),e.createElement(s.Typography,{fontWeight:500,fontSize:\"1rem\",lineHeight:\"1.3em\",textAlign:\"center\"},p??(f?\"Vous avez ajout\\xE9 le maximum d'Images possible\":\"Vous pouvez ajouter les images en cliquant ici.\")),e.createElement(s.Stack,{display:\"grid\",sx:{gridTemplateColumns:d,gap:\"15px\"}},a.map(n=>{let o=typeof n==\"string\"?{name:n,preview:n}:n,g=typeof o==\"string\"?o:o.preview;return e.createElement(s.Stack,{sx:{width:c,height:c,borderRadius:1,overflow:\"hidden\",position:\"relative\",margin:r===1?\"auto\":0},key:g},e.createElement(\"img\",{src:g,width:c,height:c,style:{objectFit:\"cover\"},alt:typeof o==\"string\"?o:o.name}),e.createElement(s.Stack,{alignItems:\"center\",justifyContent:\"center\",sx:{width:c,height:c,borderRadius:1,zIndex:10,position:\"absolute\",top:0,left:0,bgcolor:\"rgba(255,255,255,0)\",backdropFilter:\"blur(0)\",transition:\"all linear 0.25s\",opacity:0,\"&:hover\":{bgcolor:\"rgba(255,255,255,0.25)\",backdropFilter:\"blur(5px)\",opacity:1}}},e.createElement(s.Fab,{size:\"small\",color:\"secondary\",sx:{boxShadow:\"none\"},onClick:F=>{let S=[...a.filter(h=>(typeof h==\"string\"?h:h.name)!==o.name)];y(S),i(S),F.stopPropagation()}},e.createElement(R.default,null))))})),e.createElement(s.Typography,{variant:\"caption\",textAlign:\"center\"},\"Le nombre maximum d'image est \",r)))},C=A;\n","import * as React from \"react\";\nimport Dropzone from \"dropzone\";\nimport { Fab, Stack, Typography } from \"@mui/material\";\nimport { useDropzone } from \"react-dropzone\";\nimport DeleteOutlineRounded from \"@mui/icons-material/DeleteOutlineRounded\";\n\nDropzone.autoDiscover = false;\n\nconst ReactImageUpload: React.FC<{\n  initImage?: string[];\n  label?: string;\n  description?: string;\n  maxFiles?: number;\n  onImageChange: (images: (File | string)[]) => void;\n}> = ({ initImage, onImageChange, maxFiles = 5, label, description }) => {\n  /**\n   * IMAGES SELECTED BY THE USER\n   */\n  const [files, setFiles] = React.useState<(File | string)[]>(initImage ?? []);\n  const { getRootProps, getInputProps } = useDropzone({\n    accept: { \"image/*\": [] },\n    // maxSize: 1024 * 1024 * 1,\n    minSize: 1024,\n    maxFiles: maxFiles,\n    multiple: maxFiles === 1 ? false : true,\n    onDropRejected(fileRejections, event) {\n      console.log(fileRejections, event);\n\n      const multipleText =\n        fileRejections.length > 1\n          ? \"Fichiers ont été réfusés\"\n          : \"Fichier a été réfusé\";\n\n      alert(`${fileRejections.length} ${multipleText}.`);\n      // enqueueSnackbar(\n      //   `Vos Fichiers doivent faire au plus 1Mb. format: Image!`,\n      //   {\n      //     variant: \"error\",\n      //     style: { maxWidth: 300, fontSize: 12 },\n      //   }\n      // );\n    },\n\n    onDrop: (acceptedFiles) => {\n      const newList = [\n        ...files,\n        ...acceptedFiles\n          .map((file) =>\n            Object.assign(file, {\n              preview: URL.createObjectURL(file),\n            })\n          )\n          .filter(\n            (file) =>\n              files.filter((_file: File | string) => {\n                if (typeof _file === \"string\") return false;\n\n                return _file.name === file.name;\n              }).length === 0\n          ),\n      ];\n      /**\n       * CHANGE THE LOCAL VERSION OF THE IMAGES\n       */\n      setFiles(newList);\n\n      /**\n       * CHANGE THE PARENT VERSION TOO\n       */\n      if (onImageChange) {\n        onImageChange(newList);\n      }\n    },\n  });\n\n  /**\n   * USED FOR PERFORMANCE\n   */\n  React.useEffect(\n    () => () => {\n      // Make sure to revoke the data uris to avoid memory leaks\n      files.forEach((file) => URL.revokeObjectURL((file as any).preview));\n    },\n    [files]\n  );\n\n  console.log(files);\n\n  const reachedLimit = files.length >= maxFiles;\n\n  let gridTemplateColumns = \"1fr 1fr 1fr\";\n  let size = 100;\n\n  if (maxFiles === 1) {\n    gridTemplateColumns = \"1fr\";\n    size = 200;\n  }\n\n  if (maxFiles === 2) {\n    gridTemplateColumns = \"1fr 1fr\";\n    size = 160;\n  }\n\n  return (\n    <Stack sx={{ \"& .dropzone\": { border: 0, p: 0 } }}>\n      <Stack\n        {...(!reachedLimit ? getRootProps({ className: \"dropzone\" }) : {})}\n        spacing={2}\n        sx={{ cursor: reachedLimit ? \"auto\" : \"pointer\" }}\n      >\n        <input {...getInputProps()} />\n        <Typography\n          fontWeight={700}\n          fontSize=\"2rem\"\n          lineHeight=\"1em\"\n          textAlign=\"center\"\n        >\n          {label ?? \"Images\"}\n        </Typography>\n        <Typography\n          fontWeight={500}\n          fontSize=\"1rem\"\n          lineHeight=\"1.3em\"\n          textAlign=\"center\"\n        >\n          {description ??\n            (!reachedLimit\n              ? \"Vous pouvez ajouter les images en cliquant ici.\"\n              : \"Vous avez ajouté le maximum d'Images possible\")}\n        </Typography>\n        <Stack display=\"grid\" sx={{ gridTemplateColumns, gap: \"15px\" }}>\n          {files.map((file) => {\n            const fileIsString = typeof file === \"string\";\n\n            const _file = fileIsString\n              ? { name: file as string, preview: file as string }\n              : (file as File);\n\n            const src =\n              typeof _file === \"string\" ? _file : (_file as any).preview;\n\n            return (\n              <Stack\n                sx={{\n                  width: size,\n                  height: size,\n                  borderRadius: 1,\n                  overflow: \"hidden\",\n                  position: \"relative\",\n                  margin: maxFiles === 1 ? \"auto\" : 0,\n                }}\n                key={src}\n              >\n                <img\n                  src={src}\n                  width={size}\n                  height={size}\n                  style={{ objectFit: \"cover\" }}\n                  alt={typeof _file === \"string\" ? _file : (_file as any).name}\n                />\n                <Stack\n                  alignItems=\"center\"\n                  justifyContent=\"center\"\n                  sx={{\n                    width: size,\n                    height: size,\n                    borderRadius: 1,\n                    zIndex: 10,\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    bgcolor: \"rgba(255,255,255,0)\",\n                    backdropFilter: \"blur(0)\",\n                    transition: \"all linear 0.25s\",\n                    opacity: 0,\n\n                    \"&:hover\": {\n                      bgcolor: \"rgba(255,255,255,0.25)\",\n                      backdropFilter: \"blur(5px)\",\n                      opacity: 1,\n                    },\n                  }}\n                >\n                  <Fab\n                    size=\"small\"\n                    color=\"secondary\"\n                    sx={{ boxShadow: \"none\" }}\n                    onClick={(e) => {\n                      const _files = [\n                        ...files.filter((f) => {\n                          const isString = typeof f === \"string\";\n                          const name = isString\n                            ? (f as string)\n                            : (f as File).name;\n\n                          return name !== _file.name;\n                        }),\n                      ];\n\n                      setFiles(_files);\n\n                      onImageChange(_files);\n\n                      e.stopPropagation();\n                    }}\n                  >\n                    <DeleteOutlineRounded />\n                  </Fab>\n                </Stack>\n              </Stack>\n            );\n          })}\n        </Stack>\n        <Typography variant=\"caption\" textAlign=\"center\">\n          {/* Chacune de vos images doit faire au plus 1Mb. <br /> Il vous faut\n          aussi noter que seul les images de format (.JPEG, .JPG, .PNG) sont\n          prise en compte.\n          <br /> */}\n          Le nombre maximum d&apos;image est {maxFiles}\n        </Typography>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default ReactImageUpload;\n"]}