{"version":3,"sources":["/Users/drofreddyjuniordiomande/.projects/libs/nodejs/react-image-upload/dist/index.js","../src/index.tsx","../src/ReactImagePicker.tsx","../src/uploadImage.ts"],"names":["A","Object","create","h","defineProperty","C","getOwnPropertyDescriptor","M","getOwnPropertyNames","E","getPrototypeOf","O","prototype","hasOwnProperty","W","e","o","t","get","enumerable","S","p","s","call","k","__esModule","value","B","src_exports","__export","default","src_default","uploadImage","module","exports","__toCommonJS","React","require","import_dropzone","import_material","import_react_dropzone","P","Dropzone","autoDiscover","ReactImagePicker","initImages","onImageChange","maxFiles","label","description","deleteIcon","deleteBtnColor","deleteIconColor","localImage","hideTitle","sx","sectionGap","imageGap","r","useState","files","setFiles","L","useDropzone","accept","minSize","multiple","onDropRejected","fileRejections","event","multipleText","length","alert","onDrop","acceptedFiles","newList","map","file","assign","preview","URL","createObjectURL","filter","_file","name","getRootProps","getInputProps","useEffect","forEach","revokeObjectURL","reachedLimit","gridTemplateColumns","size","createElement","i","Stack","padding","boxSizing","aspectRatio","width","border","overflow","className","spacing","cursor","Typography","fontWeight","fontSize","lineHeight","textAlign","display","gap","maxHeight","src","imgProps","height","style","objectFit","alt","alignItems","justifyContent","borderRadius","position","margin","boxShadow","key","zIndex","top","left","bgcolor","backdropFilter","transition","opacity","Fab","color","onClick","_files","f","stopPropagation","DeleteIcon","variant","xmlns","fill","viewBox","d","import_storage","storage","isProd","path","_path","fullPath","storageRef","uploadTask","endsWith","slice","trim","g","ref","uploadBytesResumable","getDownloadURL","snapshot"],"mappings":"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","sourcesContent":["\"use strict\";var A=Object.create;var h=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var M=Object.getOwnPropertyNames;var E=Object.getPrototypeOf,O=Object.prototype.hasOwnProperty;var W=(e,o)=>{for(var t in o)h(e,t,{get:o[t],enumerable:!0})},S=(e,o,t,p)=>{if(o&&typeof o==\"object\"||typeof o==\"function\")for(let s of M(o))!O.call(e,s)&&s!==t&&h(e,s,{get:()=>o[s],enumerable:!(p=C(o,s))||p.enumerable});return e};var k=(e,o,t)=>(t=e!=null?A(E(e)):{},S(o||!e||!e.__esModule?h(t,\"default\",{value:e,enumerable:!0}):t,e)),B=e=>S(h({},\"__esModule\",{value:!0}),e);var G={};W(G,{default:()=>q,uploadImage:()=>_});module.exports=B(G);var r=k(require(\"react\")),P=k(require(\"dropzone\")),i=require(\"@mui/material\"),L=require(\"react-dropzone\");P.default.autoDiscover=!1;var T=({initImages:e=[],onImageChange:o,maxFiles:t=1,label:p=\"Images\",description:s,deleteIcon:d,deleteBtnColor:b=\"#f44336\",deleteIconColor:m=\"#ffffff\",localImage:y,hideTitle:V=!1,sx:j={},sectionGap:D=\"20px\",imageGap:U=\"15px\"})=>{let[c,R]=r.useState(e),{getRootProps:F,getInputProps:H}=(0,L.useDropzone)({accept:{\"image/*\":[]},minSize:1024,maxFiles:t,multiple:t!==1,onDropRejected(n,u){let a=n.length>1?\"Fichiers ont \\xE9t\\xE9 r\\xE9fus\\xE9s\":\"Fichier a \\xE9t\\xE9 r\\xE9fus\\xE9\";alert(`${n.length} ${a}.`)},onDrop:n=>{let u=[...c,...n.map(a=>Object.assign(a,{preview:URL.createObjectURL(a)})).filter(a=>c.filter(l=>typeof l==\"string\"?!1:l.name===a.name).length===0)];R(u),o&&o(u)}});r.useEffect(()=>()=>{c.forEach(n=>URL.revokeObjectURL(n.preview))},[c]);let x=c.length>=t,v=\"1fr 1fr 1fr\",f=115;return t===1&&(v=\"1fr\",f=200),t===2&&(v=\"1fr 1fr\",f=175),r.createElement(i.Stack,{sx:{padding:\"20px\",boxSizing:\"border-box\",aspectRatio:1,width:400,...j,\"& .dropzone\":{border:0,p:0},overflow:\"visible\"}},r.createElement(i.Stack,{...x?{}:F({className:\"dropzone\"}),spacing:D,sx:{cursor:x?\"auto\":\"pointer\"}},r.createElement(\"input\",{...H()}),!V&&r.createElement(i.Typography,{fontWeight:700,fontSize:\"2rem\",lineHeight:\"1em\",textAlign:\"center\"},p),r.createElement(i.Typography,{fontWeight:500,fontSize:\"1rem\",lineHeight:\"1.3em\",textAlign:\"center\"},s??(x?\"Vous avez ajout\\xE9 le maximum d'Images possible\":\"Vous pouvez ajouter les images en cliquant ici.\")),r.createElement(i.Stack,{display:\"grid\",sx:{gridTemplateColumns:v,gap:U,maxHeight:380}},c.map(n=>{let a=typeof n==\"string\"?{name:n,preview:n}:n,l=typeof a==\"string\"?a:a.preview,z={src:l,width:f,height:f,style:{objectFit:\"cover\",...t===1?{}:{width:\"100%\",height:\"100%\"}},alt:typeof a==\"string\"?a:a.name};return r.createElement(i.Stack,{alignItems:\"center\",justifyContent:\"center\",display:\"flex\",sx:{width:\"100%\",aspectRatio:t===1?void 0:1,borderRadius:5,overflow:\"hidden\",position:\"relative\",margin:t===1?\"auto\":0,boxShadow:\"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\"},key:l},y?y(z):r.createElement(\"img\",{...z}),r.createElement(i.Stack,{alignItems:\"center\",justifyContent:\"center\",sx:{width:\"100%\",height:\"100%\",borderRadius:5,zIndex:10,position:\"absolute\",top:0,left:0,bgcolor:\"rgba(255,255,255,0)\",backdropFilter:\"blur(0)\",transition:\"all linear 0.25s\",opacity:0,\"&:hover\":{bgcolor:\"rgba(255,255,255,0.25)\",backdropFilter:\"blur(5px)\",opacity:1}}},r.createElement(i.Fab,{size:\"small\",color:\"error\",sx:{boxShadow:\"none\",bgcolor:b,color:m},onClick:$=>{let I=[...c.filter(w=>(typeof w==\"string\"?w:w.name)!==a.name)];R(I),o(I),$.stopPropagation()}},d??r.createElement(N,null))))})),r.createElement(i.Typography,{variant:\"caption\",textAlign:\"center\"},\"Le nombre maximum d'image est \",t)))},N=()=>r.createElement(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:\"16\",height:\"16\",fill:\"currentColor\",className:\"bi bi-trash\",viewBox:\"0 0 16 16\"},r.createElement(\"path\",{d:\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z\"}),r.createElement(\"path\",{d:\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z\"}));var g=require(\"firebase/storage\"),_=async({file:e,storage:o,isProd:t=!1,path:p=\"Images\"})=>{if(typeof e==\"string\")return e;let s=p.endsWith(\"/\")?p.slice(0,-1):p;s.trim().length||(s=\"Images\");let d=`${t?\"\":\"DEV/\"}${s}/${e.name}`,b=(0,g.ref)(o,d),m=(0,g.uploadBytesResumable)(b,e);return await m,await(0,g.getDownloadURL)(m.snapshot.ref)};var q=T;0&&(module.exports={uploadImage});\n","import { ReactImagePicker } from \"./ReactImagePicker\";\n\nexport * from \"./types\";\n\nexport * from \"./uploadImage\";\n\nexport default ReactImagePicker;\n","import * as React from \"react\";\nimport Dropzone from \"dropzone\";\nimport { Fab, Stack, Typography } from \"@mui/material\";\nimport { useDropzone } from \"react-dropzone\";\nimport { LocalImageType, ReactImagePickerProps } from \"./types\";\n\nDropzone.autoDiscover = false;\n\n/**\n * A React component for selecting and displaying images using a drag-and-drop interface.\n *\n * @param {Object} props - The component props.\n * @param {(File | string)[]} [props.initImage] - Initial images to display.\n * @param {(images: (File | string)[]) => void} props.onImageChange - Callback triggered when the image list changes.\n * @param {number} [props.maxFiles=1] - Maximum number of files that can be selected.\n * @param {string} [props.label] - The label displayed for the image picker.\n * @param {string} [props.description] - Additional text to describe the image picker.\n * @param {React.ReactNode} [props.deleteIcon] - Custom delete icon to be used.\n * @param {string} [props.deleteBtnColor=\"#f44336\"] - Color of the delete button.\n * @param {string} [props.deleteIconColor=\"#ffffff\"] - Color of the delete icon.\n * @param {(props: LocalImageType) => React.ReactNode} [props.localImage] - Custom component to render images.\n * @param {boolean} [props.hideTitle=false] - Flag to hide the title.\n * @returns {JSX.Element} The ReactImagePicker component.\n */\nexport const ReactImagePicker: React.FC<ReactImagePickerProps> = ({\n  initImages = [],\n  onImageChange,\n  maxFiles = 1,\n  label = \"Images\",\n  description,\n  deleteIcon,\n  deleteBtnColor = \"#f44336\",\n  deleteIconColor = \"#ffffff\",\n  localImage,\n  hideTitle = false,\n  sx = {},\n  sectionGap = \"20px\",\n  imageGap = \"15px\",\n}) => {\n  /**\n   * IMAGES SELECTED BY THE USER\n   */\n  const [files, setFiles] = React.useState<(File | string)[]>(initImages);\n  const { getRootProps, getInputProps } = useDropzone({\n    accept: { \"image/*\": [] },\n    minSize: 1024,\n    maxFiles: maxFiles,\n    multiple: maxFiles === 1 ? false : true,\n    onDropRejected(fileRejections, event) {\n      const multipleText =\n        fileRejections.length > 1\n          ? \"Fichiers ont été réfusés\"\n          : \"Fichier a été réfusé\";\n\n      alert(`${fileRejections.length} ${multipleText}.`);\n    },\n\n    onDrop: (acceptedFiles) => {\n      const newList = [\n        ...files,\n        ...acceptedFiles\n          .map((file) =>\n            Object.assign(file, {\n              preview: URL.createObjectURL(file),\n            })\n          )\n          .filter(\n            (file) =>\n              files.filter((_file: File | string) => {\n                if (typeof _file === \"string\") return false;\n\n                return _file.name === file.name;\n              }).length === 0\n          ),\n      ];\n      /**\n       * CHANGE THE LOCAL VERSION OF THE IMAGES\n       */\n      setFiles(newList);\n\n      /**\n       * CHANGE THE PARENT VERSION TOO\n       */\n      if (onImageChange) {\n        onImageChange(newList);\n      }\n    },\n  });\n\n  /**\n   * USED FOR PERFORMANCE\n   */\n  React.useEffect(\n    () => () => {\n      // Make sure to revoke the data uris to avoid memory leaks\n      files.forEach((file) => URL.revokeObjectURL((file as any).preview));\n    },\n    [files]\n  );\n\n  const reachedLimit = files.length >= maxFiles;\n\n  let gridTemplateColumns = \"1fr 1fr 1fr\";\n  let size = 115;\n\n  if (maxFiles === 1) {\n    gridTemplateColumns = \"1fr\";\n    size = 200;\n  }\n\n  if (maxFiles === 2) {\n    gridTemplateColumns = \"1fr 1fr\";\n    size = 175;\n  }\n\n  return (\n    <Stack\n      sx={{\n        padding: \"20px\",\n        boxSizing: \"border-box\",\n        aspectRatio: 1,\n        width: 400,\n        ...sx,\n        \"& .dropzone\": { border: 0, p: 0 },\n        overflow: \"visible\",\n      }}\n    >\n      <Stack\n        {...(!reachedLimit ? getRootProps({ className: \"dropzone\" }) : {})}\n        spacing={sectionGap}\n        sx={{ cursor: reachedLimit ? \"auto\" : \"pointer\" }}\n      >\n        <input {...getInputProps()} />\n        {!hideTitle && (\n          <Typography\n            fontWeight={700}\n            fontSize=\"2rem\"\n            lineHeight=\"1em\"\n            textAlign=\"center\"\n          >\n            {label}\n          </Typography>\n        )}\n        <Typography\n          fontWeight={500}\n          fontSize=\"1rem\"\n          lineHeight=\"1.3em\"\n          textAlign=\"center\"\n        >\n          {description ??\n            (!reachedLimit\n              ? \"Vous pouvez ajouter les images en cliquant ici.\"\n              : \"Vous avez ajouté le maximum d'Images possible\")}\n        </Typography>\n        <Stack\n          display=\"grid\"\n          sx={{\n            gridTemplateColumns,\n            gap: imageGap,\n            maxHeight: 380,\n          }}\n        >\n          {files.map((file) => {\n            const fileIsString = typeof file === \"string\";\n\n            const _file = fileIsString\n              ? { name: file as string, preview: file as string }\n              : (file as File);\n\n            const src =\n              typeof _file === \"string\" ? _file : (_file as any).preview;\n\n            const imgProps: LocalImageType = {\n              src: src,\n              width: size,\n              height: size,\n              style: {\n                objectFit: \"cover\",\n                ...(maxFiles === 1 ? {} : { width: \"100%\", height: \"100%\" }),\n              },\n              alt: typeof _file === \"string\" ? _file : (_file as any).name,\n            };\n\n            return (\n              <Stack\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                display=\"flex\"\n                sx={{\n                  width: \"100%\",\n                  aspectRatio: maxFiles === 1 ? undefined : 1,\n                  borderRadius: 5,\n                  overflow: \"hidden\",\n                  position: \"relative\",\n                  margin: maxFiles === 1 ? \"auto\" : 0,\n                  // border: \"1px solid #ececf0\",\n                  boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\",\n                }}\n                key={src}\n              >\n                {localImage ? localImage(imgProps) : <img {...imgProps} />}\n                <Stack\n                  alignItems=\"center\"\n                  justifyContent=\"center\"\n                  sx={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    borderRadius: 5,\n                    zIndex: 10,\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    bgcolor: \"rgba(255,255,255,0)\",\n                    backdropFilter: \"blur(0)\",\n                    transition: \"all linear 0.25s\",\n                    opacity: 0,\n\n                    \"&:hover\": {\n                      bgcolor: \"rgba(255,255,255,0.25)\",\n                      backdropFilter: \"blur(5px)\",\n                      opacity: 1,\n                    },\n                  }}\n                >\n                  <Fab\n                    size=\"small\"\n                    color=\"error\"\n                    sx={{\n                      boxShadow: \"none\",\n                      bgcolor: deleteBtnColor,\n                      color: deleteIconColor,\n                    }}\n                    onClick={(e) => {\n                      const _files = [\n                        ...files.filter((f) => {\n                          const isString = typeof f === \"string\";\n                          const name = isString\n                            ? (f as string)\n                            : (f as File).name;\n\n                          return name !== _file.name;\n                        }),\n                      ];\n\n                      setFiles(_files);\n\n                      onImageChange(_files);\n\n                      e.stopPropagation();\n                    }}\n                  >\n                    {deleteIcon ?? <DeleteIcon />}\n                  </Fab>\n                </Stack>\n              </Stack>\n            );\n          })}\n        </Stack>\n        <Typography variant=\"caption\" textAlign=\"center\">\n          {/* Chacune de vos images doit faire au plus 1Mb. <br /> Il vous faut\n          aussi noter que seul les images de format (.JPEG, .JPG, .PNG) sont\n          prise en compte.\n          <br /> */}\n          Le nombre maximum d&apos;image est {maxFiles}\n        </Typography>\n      </Stack>\n    </Stack>\n  );\n};\n\nconst DeleteIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    fill=\"currentColor\"\n    className=\"bi bi-trash\"\n    viewBox=\"0 0 16 16\"\n  >\n    <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z\" />\n    <path d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z\" />\n  </svg>\n);\n","import { getDownloadURL, ref, uploadBytesResumable } from \"firebase/storage\";\nimport { UploadImageType } from \"./types\";\n\n/**\n * Uploads a file to Firebase Storage and returns the download URL.\n * @param {File|string} file The file to upload, or the URL of the file\n * @param {FirebaseStorage} storage The Firebase Storage instance\n * @param {boolean} [isProd=false] Whether or not this is a production upload\n * @param {string} [path='Images'] The path to upload the file to\n * @returns {Promise<string>} The download URL of the uploaded file\n */\nexport const uploadImage: UploadImageType = async ({\n  file,\n  storage,\n  isProd = false,\n  path = \"Images\",\n}): Promise<string> => {\n  if (typeof file === \"string\") return file;\n\n  // The path is the full path including the filename, so we'll remove the trailing slash\n  let _path = path.endsWith(\"/\") ? path.slice(0, -1) : path;\n\n  // If the path is empty, we'll default to \"Images\"\n  if (!_path.trim().length) _path = \"Images\";\n\n  // The full path is the path plus the filename\n  const fullPath = `${isProd ? \"\" : \"DEV/\"}${_path}/${file.name}`;\n\n  // Create a reference to the file\n  const storageRef = ref(storage, fullPath);\n\n  // Start the upload\n  const uploadTask = uploadBytesResumable(storageRef, file);\n\n  // Wait for the upload to finish\n  await uploadTask;\n\n  // Get the download URL\n  const url = await getDownloadURL(uploadTask.snapshot.ref);\n\n  // Return the download URL\n  return url;\n};\n"]}