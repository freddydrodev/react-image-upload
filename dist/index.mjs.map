{"version":3,"sources":["../src/ReactImagePicker.tsx","../src/uploadImage.ts","../src/index.tsx"],"names":["React","Dropzone","Fab","Stack","Typography","useDropzone","autoDiscover","ReactImagePicker","initImages","onImageChange","maxFiles","label","description","deleteIcon","deleteBtnColor","deleteIconColor","localImage","hideTitle","sectionGap","imageGap","imageGridCount","imageBorderRadius","sx","props","e","useState","files","setFiles","accept","minSize","multiple","onDropRejected","fileRejections","event","multipleText","length","alert","onDrop","acceptedFiles","newList","map","file","Object","assign","preview","URL","createObjectURL","filter","_file","name","getRootProps","getInputProps","useEffect","forEach","revokeObjectURL","reachedLimit","gridTemplateColumns","size","createElement","padding","boxSizing","aspectRatio","width","border","p","overflow","className","spacing","cursor","fontWeight","fontSize","lineHeight","textAlign","display","gap","maxHeight","src","imgProps","height","style","objectFit","alt","alignItems","justifyContent","borderRadius","position","margin","boxShadow","key","zIndex","top","left","bgcolor","backdropFilter","transition","opacity","color","onClick","_files","f","stopPropagation","DeleteIcon","variant","xmlns","fill","viewBox","d","getDownloadURL","ref","uploadBytesResumable","uploadImage","storage","isProd","path","_path","fullPath","storageRef","uploadTask","endsWith","slice","trim","snapshot","index_default"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport Dropzone from \"dropzone\";\nimport { Fab, Stack, Typography } from \"@mui/material\";\nimport { useDropzone } from \"react-dropzone\";\nimport { LocalImageType, ReactImagePickerProps } from \"./types\";\n\nDropzone.autoDiscover = false;\n\n/**\n * A React component for selecting and displaying images using a drag-and-drop interface.\n *\n * @param {Object} props - The component props.\n * @param {(File | string)[]} [props.initImage] - Initial images to display.\n * @param {(images: (File | string)[]) => void} props.onImageChange - Callback triggered when the image list changes.\n * @param {number} [props.maxFiles=1] - Maximum number of files that can be selected.\n * @param {string} [props.label] - The label displayed for the image picker.\n * @param {string} [props.description] - Additional text to describe the image picker.\n * @param {React.ReactNode} [props.deleteIcon] - Custom delete icon to be used.\n * @param {string} [props.deleteBtnColor=\"#f44336\"] - Color of the delete button.\n * @param {string} [props.deleteIconColor=\"#ffffff\"] - Color of the delete icon.\n * @param {(props: LocalImageType) => React.ReactNode} [props.localImage] - Custom component to render images.\n * @param {boolean} [props.hideTitle=false] - Flag to hide the title.\n * @param {string} [props.sectionGap=\"15px\"] - Gap between sections (ex: title, description, images, etc...) in pixels.\n * @param {string} [props.imageGap=\"10px\"] - Gap between images in pixels.\n * @param {number} [props.imageGridCount=3] - The number of images to display in the grid.\n * @param {string} [props.imageBorderRadius=\"15px\"] - The border radius of the images.\n * @returns {JSX.Element} The ReactImagePicker component.\n */\nexport const ReactImagePicker: React.FC<ReactImagePickerProps> = ({\n  initImages = [],\n  onImageChange,\n  maxFiles = 1,\n  label = \"Images\",\n  description,\n  deleteIcon,\n  deleteBtnColor = \"#f44336\",\n  deleteIconColor = \"#ffffff\",\n  localImage,\n  hideTitle = false,\n  sectionGap = \"15px\",\n  imageGap = \"10px\",\n  imageGridCount = 3,\n  imageBorderRadius = \"15px\",\n  sx,\n  ...props\n}) => {\n  /**\n   * IMAGES SELECTED BY THE USER\n   */\n  const [files, setFiles] = React.useState<(File | string)[]>(initImages);\n  const { getRootProps, getInputProps } = useDropzone({\n    accept: { \"image/*\": [] },\n    minSize: 1024,\n    maxFiles: maxFiles,\n    multiple: maxFiles === 1 ? false : true,\n    onDropRejected(fileRejections, event) {\n      const multipleText =\n        fileRejections.length > 1\n          ? \"Fichiers ont été réfusés\"\n          : \"Fichier a été réfusé\";\n\n      alert(`${fileRejections.length} ${multipleText}.`);\n    },\n\n    onDrop: (acceptedFiles) => {\n      const newList = [\n        ...files,\n        ...acceptedFiles\n          .map((file) =>\n            Object.assign(file, {\n              preview: URL.createObjectURL(file),\n            })\n          )\n          .filter(\n            (file) =>\n              files.filter((_file: File | string) => {\n                if (typeof _file === \"string\") return false;\n\n                return _file.name === file.name;\n              }).length === 0\n          ),\n      ];\n      /**\n       * CHANGE THE LOCAL VERSION OF THE IMAGES\n       */\n      setFiles(newList);\n\n      /**\n       * CHANGE THE PARENT VERSION TOO\n       */\n      if (onImageChange) {\n        onImageChange(newList);\n      }\n    },\n  });\n\n  /**\n   * USED FOR PERFORMANCE\n   */\n  React.useEffect(\n    () => () => {\n      // Make sure to revoke the data uris to avoid memory leaks\n      files.forEach((file) => URL.revokeObjectURL((file as any).preview));\n    },\n    [files]\n  );\n\n  const reachedLimit = files.length >= maxFiles;\n\n  let gridTemplateColumns = `repeat(${imageGridCount}, 1fr)`;\n  let size = 115;\n\n  if (maxFiles === 1) {\n    gridTemplateColumns = \"1fr\";\n    size = 200;\n  }\n\n  if (maxFiles === 2) {\n    gridTemplateColumns = \"1fr 1fr\";\n    size = 175;\n  }\n\n  return (\n    <Stack\n      {...props}\n      sx={{\n        padding: \"20px\",\n        boxSizing: \"border-box\",\n        aspectRatio: 1,\n        width: 400,\n        ...sx,\n        \"& .dropzone\": { border: 0, p: 0 },\n        overflow: \"visible\",\n      }}\n    >\n      <Stack\n        {...(!reachedLimit ? getRootProps({ className: \"dropzone\" }) : {})}\n        spacing={sectionGap}\n        sx={{ cursor: reachedLimit ? \"auto\" : \"pointer\" }}\n      >\n        <input {...getInputProps()} />\n        {!hideTitle && (\n          <Typography\n            fontWeight={700}\n            fontSize=\"2rem\"\n            lineHeight=\"1em\"\n            textAlign=\"center\"\n          >\n            {label}\n          </Typography>\n        )}\n        <Typography\n          fontWeight={500}\n          fontSize=\"1rem\"\n          lineHeight=\"1.3em\"\n          textAlign=\"center\"\n        >\n          {description ??\n            (!reachedLimit\n              ? \"Vous pouvez ajouter les images en cliquant ici.\"\n              : \"Vous avez ajouté le maximum d'Images possible\")}\n        </Typography>\n        <Stack\n          display=\"grid\"\n          sx={{\n            gridTemplateColumns,\n            gap: imageGap,\n            maxHeight: 380,\n          }}\n        >\n          {files.map((file) => {\n            const fileIsString = typeof file === \"string\";\n\n            const _file = fileIsString\n              ? { name: file as string, preview: file as string }\n              : (file as File);\n\n            const src =\n              typeof _file === \"string\" ? _file : (_file as any).preview;\n\n            const imgProps: LocalImageType = {\n              src: src,\n              width: size,\n              height: size,\n              style: {\n                objectFit: \"cover\",\n                ...(maxFiles === 1 ? {} : { width: \"100%\", height: \"100%\" }),\n              },\n              alt: typeof _file === \"string\" ? _file : (_file as any).name,\n            };\n\n            return (\n              <Stack\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                display=\"flex\"\n                sx={{\n                  width: \"100%\",\n                  aspectRatio: maxFiles === 1 ? undefined : 1,\n                  borderRadius: imageBorderRadius,\n                  overflow: \"hidden\",\n                  position: \"relative\",\n                  margin: maxFiles === 1 ? \"auto\" : 0,\n                  // border: \"1px solid #ececf0\",\n                  boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\",\n                }}\n                key={src}\n              >\n                {localImage ? localImage(imgProps) : <img {...imgProps} />}\n                <Stack\n                  alignItems=\"center\"\n                  justifyContent=\"center\"\n                  sx={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    borderRadius: imageBorderRadius,\n                    zIndex: 10,\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    bgcolor: \"rgba(255,255,255,0)\",\n                    backdropFilter: \"blur(0)\",\n                    transition: \"all linear 0.25s\",\n                    opacity: 0,\n\n                    \"&:hover\": {\n                      bgcolor: \"rgba(255,255,255,0.25)\",\n                      backdropFilter: \"blur(5px)\",\n                      opacity: 1,\n                    },\n                  }}\n                >\n                  <Fab\n                    size=\"small\"\n                    color=\"error\"\n                    sx={{\n                      boxShadow: \"none\",\n                      bgcolor: deleteBtnColor,\n                      color: deleteIconColor,\n                    }}\n                    onClick={(e) => {\n                      const _files = [\n                        ...files.filter((f) => {\n                          const isString = typeof f === \"string\";\n                          const name = isString\n                            ? (f as string)\n                            : (f as File).name;\n\n                          return name !== _file.name;\n                        }),\n                      ];\n\n                      setFiles(_files);\n\n                      onImageChange(_files);\n\n                      e.stopPropagation();\n                    }}\n                  >\n                    {deleteIcon ?? <DeleteIcon />}\n                  </Fab>\n                </Stack>\n              </Stack>\n            );\n          })}\n        </Stack>\n        <Typography variant=\"caption\" textAlign=\"center\">\n          {/* Chacune de vos images doit faire au plus 1Mb. <br /> Il vous faut\n          aussi noter que seul les images de format (.JPEG, .JPG, .PNG) sont\n          prise en compte.\n          <br /> */}\n          Le nombre maximum d&apos;image est {maxFiles}\n        </Typography>\n      </Stack>\n    </Stack>\n  );\n};\n\nconst DeleteIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    fill=\"currentColor\"\n    className=\"bi bi-trash\"\n    viewBox=\"0 0 16 16\"\n  >\n    <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z\" />\n    <path d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z\" />\n  </svg>\n);\n","import { getDownloadURL, ref, uploadBytesResumable } from \"firebase/storage\";\nimport { UploadImageType } from \"./types\";\n\n/**\n * Uploads a file to Firebase Storage and returns the download URL.\n * @param {File|string} file The file to upload, or the URL of the file\n * @param {FirebaseStorage} storage The Firebase Storage instance\n * @param {boolean} [isProd=false] Whether or not this is a production upload\n * @param {string} [path='Images'] The path to upload the file to\n * @returns {Promise<string>} The download URL of the uploaded file\n */\nexport const uploadImage: UploadImageType = async ({\n  file,\n  storage,\n  isProd = false,\n  path = \"Images\",\n}): Promise<string> => {\n  if (typeof file === \"string\") return file;\n\n  // The path is the full path including the filename, so we'll remove the trailing slash\n  let _path = path.endsWith(\"/\") ? path.slice(0, -1) : path;\n\n  // If the path is empty, we'll default to \"Images\"\n  if (!_path.trim().length) _path = \"Images\";\n\n  // The full path is the path plus the filename\n  const fullPath = `${isProd ? \"\" : \"DEV/\"}${_path}/${file.name}`;\n\n  // Create a reference to the file\n  const storageRef = ref(storage, fullPath);\n\n  // Start the upload\n  const uploadTask = uploadBytesResumable(storageRef, file);\n\n  // Wait for the upload to finish\n  await uploadTask;\n\n  // Get the download URL\n  const url = await getDownloadURL(uploadTask.snapshot.ref);\n\n  // Return the download URL\n  return url;\n};\n","import { ReactImagePicker } from \"./ReactImagePicker\";\n\nexport * from \"./types\";\n\nexport * from \"./uploadImage\";\n\nexport default ReactImagePicker;\n\nexport * from \"./ReactImagePicker\";\n"]}