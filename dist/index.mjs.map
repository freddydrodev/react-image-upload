{"version":3,"sources":["../src/index.tsx"],"names":["React","Dropzone","Fab","Stack","Typography","useDropzone","DeleteOutlineRounded","autoDiscover","ReactImageUpload","initImage","onImageChange","maxFiles","label","description","e","useState","files","setFiles","accept","minSize","multiple","onDropRejected","fileRejections","event","console","log","multipleText","length","alert","onDrop","acceptedFiles","newList","map","file","Object","assign","preview","URL","createObjectURL","filter","_file","name","getRootProps","getInputProps","useEffect","forEach","revokeObjectURL","reachedLimit","gridTemplateColumns","size","createElement","sx","border","p","className","spacing","cursor","fontWeight","fontSize","lineHeight","textAlign","display","gap","src","width","height","borderRadius","overflow","position","margin","key","style","objectFit","alt","alignItems","justifyContent","zIndex","top","left","bgcolor","backdropFilter","transition","opacity","color","boxShadow","onClick","_files","f","stopPropagation","variant","src_default"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport Dropzone from \"dropzone\";\nimport { Fab, Stack, Typography } from \"@mui/material\";\nimport { useDropzone } from \"react-dropzone\";\nimport DeleteOutlineRounded from \"@mui/icons-material/DeleteOutlineRounded\";\n\nDropzone.autoDiscover = false;\n\nconst ReactImageUpload: React.FC<{\n  initImage?: string[];\n  label?: string;\n  description?: string;\n  maxFiles?: number;\n  onImageChange: (images: (File | string)[]) => void;\n}> = ({ initImage, onImageChange, maxFiles = 5, label, description }) => {\n  /**\n   * IMAGES SELECTED BY THE USER\n   */\n  const [files, setFiles] = React.useState<(File | string)[]>(initImage ?? []);\n  const { getRootProps, getInputProps } = useDropzone({\n    accept: { \"image/*\": [] },\n    // maxSize: 1024 * 1024 * 1,\n    minSize: 1024,\n    maxFiles: maxFiles,\n    multiple: maxFiles === 1 ? false : true,\n    onDropRejected(fileRejections, event) {\n      console.log(fileRejections, event);\n\n      const multipleText =\n        fileRejections.length > 1\n          ? \"Fichiers ont été réfusés\"\n          : \"Fichier a été réfusé\";\n\n      alert(`${fileRejections.length} ${multipleText}.`);\n      // enqueueSnackbar(\n      //   `Vos Fichiers doivent faire au plus 1Mb. format: Image!`,\n      //   {\n      //     variant: \"error\",\n      //     style: { maxWidth: 300, fontSize: 12 },\n      //   }\n      // );\n    },\n\n    onDrop: (acceptedFiles) => {\n      const newList = [\n        ...files,\n        ...acceptedFiles\n          .map((file) =>\n            Object.assign(file, {\n              preview: URL.createObjectURL(file),\n            })\n          )\n          .filter(\n            (file) =>\n              files.filter((_file: File | string) => {\n                if (typeof _file === \"string\") return false;\n\n                return _file.name === file.name;\n              }).length === 0\n          ),\n      ];\n      /**\n       * CHANGE THE LOCAL VERSION OF THE IMAGES\n       */\n      setFiles(newList);\n\n      /**\n       * CHANGE THE PARENT VERSION TOO\n       */\n      if (onImageChange) {\n        onImageChange(newList);\n      }\n    },\n  });\n\n  /**\n   * USED FOR PERFORMANCE\n   */\n  React.useEffect(\n    () => () => {\n      // Make sure to revoke the data uris to avoid memory leaks\n      files.forEach((file) => URL.revokeObjectURL((file as any).preview));\n    },\n    [files]\n  );\n\n  console.log(files);\n\n  const reachedLimit = files.length >= maxFiles;\n\n  let gridTemplateColumns = \"1fr 1fr 1fr\";\n  let size = 100;\n\n  if (maxFiles === 1) {\n    gridTemplateColumns = \"1fr\";\n    size = 200;\n  }\n\n  if (maxFiles === 2) {\n    gridTemplateColumns = \"1fr 1fr\";\n    size = 160;\n  }\n\n  return (\n    <Stack sx={{ \"& .dropzone\": { border: 0, p: 0 } }}>\n      <Stack\n        {...(!reachedLimit ? getRootProps({ className: \"dropzone\" }) : {})}\n        spacing={2}\n        sx={{ cursor: reachedLimit ? \"auto\" : \"pointer\" }}\n      >\n        <input {...getInputProps()} />\n        <Typography\n          fontWeight={700}\n          fontSize=\"2rem\"\n          lineHeight=\"1em\"\n          textAlign=\"center\"\n        >\n          {label ?? \"Images\"}\n        </Typography>\n        <Typography\n          fontWeight={500}\n          fontSize=\"1rem\"\n          lineHeight=\"1.3em\"\n          textAlign=\"center\"\n        >\n          {description ??\n            (!reachedLimit\n              ? \"Vous pouvez ajouter les images en cliquant ici.\"\n              : \"Vous avez ajouté le maximum d'Images possible\")}\n        </Typography>\n        <Stack display=\"grid\" sx={{ gridTemplateColumns, gap: \"15px\" }}>\n          {files.map((file) => {\n            const fileIsString = typeof file === \"string\";\n\n            const _file = fileIsString\n              ? { name: file as string, preview: file as string }\n              : (file as File);\n\n            const src =\n              typeof _file === \"string\" ? _file : (_file as any).preview;\n\n            return (\n              <Stack\n                sx={{\n                  width: size,\n                  height: size,\n                  borderRadius: 1,\n                  overflow: \"hidden\",\n                  position: \"relative\",\n                  margin: maxFiles === 1 ? \"auto\" : 0,\n                }}\n                key={src}\n              >\n                <img\n                  src={src}\n                  width={size}\n                  height={size}\n                  style={{ objectFit: \"cover\" }}\n                  alt={typeof _file === \"string\" ? _file : (_file as any).name}\n                />\n                <Stack\n                  alignItems=\"center\"\n                  justifyContent=\"center\"\n                  sx={{\n                    width: size,\n                    height: size,\n                    borderRadius: 1,\n                    zIndex: 10,\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    bgcolor: \"rgba(255,255,255,0)\",\n                    backdropFilter: \"blur(0)\",\n                    transition: \"all linear 0.25s\",\n                    opacity: 0,\n\n                    \"&:hover\": {\n                      bgcolor: \"rgba(255,255,255,0.25)\",\n                      backdropFilter: \"blur(5px)\",\n                      opacity: 1,\n                    },\n                  }}\n                >\n                  <Fab\n                    size=\"small\"\n                    color=\"secondary\"\n                    sx={{ boxShadow: \"none\" }}\n                    onClick={(e) => {\n                      const _files = [\n                        ...files.filter((f) => {\n                          const isString = typeof f === \"string\";\n                          const name = isString\n                            ? (f as string)\n                            : (f as File).name;\n\n                          return name !== _file.name;\n                        }),\n                      ];\n\n                      setFiles(_files);\n\n                      onImageChange(_files);\n\n                      e.stopPropagation();\n                    }}\n                  >\n                    <DeleteOutlineRounded />\n                  </Fab>\n                </Stack>\n              </Stack>\n            );\n          })}\n        </Stack>\n        <Typography variant=\"caption\" textAlign=\"center\">\n          {/* Chacune de vos images doit faire au plus 1Mb. <br /> Il vous faut\n          aussi noter que seul les images de format (.JPEG, .JPG, .PNG) sont\n          prise en compte.\n          <br /> */}\n          Le nombre maximum d&apos;image est {maxFiles}\n        </Typography>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default ReactImageUpload;\n"]}