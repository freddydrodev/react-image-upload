{"version":3,"sources":["/Users/drofreddyjuniordiomande/.projects/libs/nodejs/react-image-upload/dist/index.mjs","../src/ReactImagePicker.tsx","../src/uploadImage.ts","../src/index.tsx"],"names":["React","Dropzone","Fab","Stack","Typography","useDropzone","autoDiscover","ReactImagePicker","initImages","onImageChange","maxFiles","label","description","deleteIcon","deleteBtnColor","deleteIconColor","localImage","hideTitle","sectionGap","imageGap","imageGridCount","imageBorderRadius","sx","props","useState","files","setFiles","accept","minSize","multiple","onDropRejected","fileRejections","event","multipleText","length","alert","onDrop","acceptedFiles","newList","map","file","Object","assign","preview","URL","createObjectURL","filter","_file","name","getRootProps","getInputProps","useEffect","forEach","revokeObjectURL","reachedLimit","gridTemplateColumns","size","createElement","padding","boxSizing","aspectRatio","width","border","p","overflow","className","spacing","cursor","fontWeight","fontSize","lineHeight","textAlign","display","gap","maxHeight","fileIsString","src","imgProps","height","style","objectFit","alt","alignItems","justifyContent","borderRadius","position","margin","boxShadow","key","zIndex","top","left","bgcolor","backdropFilter","transition","opacity","color","onClick","e","_files","f","isString","stopPropagation","DeleteIcon","variant","xmlns","fill","viewBox","d","getDownloadURL","ref","uploadBytesResumable","uploadImage","storage","isProd","path","_path","fullPath","storageRef","uploadTask","url","endsWith","slice","trim","snapshot","index_default","default"],"mappings":"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","sourcesContent":["// src/ReactImagePicker.tsx\nimport * as React from \"react\";\nimport Dropzone from \"dropzone\";\nimport { Fab, Stack, Typography } from \"@mui/material\";\nimport { useDropzone } from \"react-dropzone\";\nDropzone.autoDiscover = false;\nvar ReactImagePicker = ({\n  initImages = [],\n  onImageChange,\n  maxFiles = 1,\n  label = \"Images\",\n  description,\n  deleteIcon,\n  deleteBtnColor = \"#f44336\",\n  deleteIconColor = \"#ffffff\",\n  localImage,\n  hideTitle = false,\n  sectionGap = \"15px\",\n  imageGap = \"10px\",\n  imageGridCount = 3,\n  imageBorderRadius = \"15px\",\n  sx,\n  ...props\n}) => {\n  const [files, setFiles] = React.useState(initImages);\n  const { getRootProps, getInputProps } = useDropzone({\n    accept: { \"image/*\": [] },\n    minSize: 1024,\n    maxFiles,\n    multiple: maxFiles === 1 ? false : true,\n    onDropRejected(fileRejections, event) {\n      const multipleText = fileRejections.length > 1 ? \"Fichiers ont \\xE9t\\xE9 r\\xE9fus\\xE9s\" : \"Fichier a \\xE9t\\xE9 r\\xE9fus\\xE9\";\n      alert(`${fileRejections.length} ${multipleText}.`);\n    },\n    onDrop: (acceptedFiles) => {\n      const newList = [\n        ...files,\n        ...acceptedFiles.map(\n          (file) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n          })\n        ).filter(\n          (file) => files.filter((_file) => {\n            if (typeof _file === \"string\") return false;\n            return _file.name === file.name;\n          }).length === 0\n        )\n      ];\n      setFiles(newList);\n      if (onImageChange) {\n        onImageChange(newList);\n      }\n    }\n  });\n  React.useEffect(\n    () => () => {\n      files.forEach((file) => URL.revokeObjectURL(file.preview));\n    },\n    [files]\n  );\n  const reachedLimit = files.length >= maxFiles;\n  let gridTemplateColumns = `repeat(${imageGridCount}, 1fr)`;\n  let size = 115;\n  if (maxFiles === 1) {\n    gridTemplateColumns = \"1fr\";\n    size = 200;\n  }\n  if (maxFiles === 2) {\n    gridTemplateColumns = \"1fr 1fr\";\n    size = 175;\n  }\n  return /* @__PURE__ */ React.createElement(\n    Stack,\n    {\n      ...props,\n      sx: {\n        padding: \"20px\",\n        boxSizing: \"border-box\",\n        aspectRatio: 1,\n        width: 400,\n        ...sx,\n        \"& .dropzone\": { border: 0, p: 0 },\n        overflow: \"visible\"\n      }\n    },\n    /* @__PURE__ */ React.createElement(\n      Stack,\n      {\n        ...!reachedLimit ? getRootProps({ className: \"dropzone\" }) : {},\n        spacing: sectionGap,\n        sx: { cursor: reachedLimit ? \"auto\" : \"pointer\" }\n      },\n      /* @__PURE__ */ React.createElement(\"input\", { ...getInputProps() }),\n      !hideTitle && /* @__PURE__ */ React.createElement(\n        Typography,\n        {\n          fontWeight: 700,\n          fontSize: \"2rem\",\n          lineHeight: \"1em\",\n          textAlign: \"center\"\n        },\n        label\n      ),\n      /* @__PURE__ */ React.createElement(\n        Typography,\n        {\n          fontWeight: 500,\n          fontSize: \"1rem\",\n          lineHeight: \"1.3em\",\n          textAlign: \"center\"\n        },\n        description ?? (!reachedLimit ? \"Vous pouvez ajouter les images en cliquant ici.\" : \"Vous avez ajout\\xE9 le maximum d'Images possible\")\n      ),\n      /* @__PURE__ */ React.createElement(\n        Stack,\n        {\n          display: \"grid\",\n          sx: {\n            gridTemplateColumns,\n            gap: imageGap,\n            maxHeight: 380\n          }\n        },\n        files.map((file) => {\n          const fileIsString = typeof file === \"string\";\n          const _file = fileIsString ? { name: file, preview: file } : file;\n          const src = typeof _file === \"string\" ? _file : _file.preview;\n          const imgProps = {\n            src,\n            width: size,\n            height: size,\n            style: {\n              objectFit: \"cover\",\n              ...maxFiles === 1 ? {} : { width: \"100%\", height: \"100%\" }\n            },\n            alt: typeof _file === \"string\" ? _file : _file.name\n          };\n          return /* @__PURE__ */ React.createElement(\n            Stack,\n            {\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              display: \"flex\",\n              sx: {\n                width: \"100%\",\n                aspectRatio: maxFiles === 1 ? void 0 : 1,\n                borderRadius: imageBorderRadius,\n                overflow: \"hidden\",\n                position: \"relative\",\n                margin: maxFiles === 1 ? \"auto\" : 0,\n                // border: \"1px solid #ececf0\",\n                boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\"\n              },\n              key: src\n            },\n            localImage ? localImage(imgProps) : /* @__PURE__ */ React.createElement(\"img\", { ...imgProps }),\n            /* @__PURE__ */ React.createElement(\n              Stack,\n              {\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                sx: {\n                  width: \"100%\",\n                  height: \"100%\",\n                  borderRadius: imageBorderRadius,\n                  zIndex: 10,\n                  position: \"absolute\",\n                  top: 0,\n                  left: 0,\n                  bgcolor: \"rgba(255,255,255,0)\",\n                  backdropFilter: \"blur(0)\",\n                  transition: \"all linear 0.25s\",\n                  opacity: 0,\n                  \"&:hover\": {\n                    bgcolor: \"rgba(255,255,255,0.25)\",\n                    backdropFilter: \"blur(5px)\",\n                    opacity: 1\n                  }\n                }\n              },\n              /* @__PURE__ */ React.createElement(\n                Fab,\n                {\n                  size: \"small\",\n                  color: \"error\",\n                  sx: {\n                    boxShadow: \"none\",\n                    bgcolor: deleteBtnColor,\n                    color: deleteIconColor\n                  },\n                  onClick: (e) => {\n                    const _files = [\n                      ...files.filter((f) => {\n                        const isString = typeof f === \"string\";\n                        const name = isString ? f : f.name;\n                        return name !== _file.name;\n                      })\n                    ];\n                    setFiles(_files);\n                    onImageChange(_files);\n                    e.stopPropagation();\n                  }\n                },\n                deleteIcon ?? /* @__PURE__ */ React.createElement(DeleteIcon, null)\n              )\n            )\n          );\n        })\n      ),\n      /* @__PURE__ */ React.createElement(Typography, { variant: \"caption\", textAlign: \"center\" }, \"Le nombre maximum d'image est \", maxFiles)\n    )\n  );\n};\nvar DeleteIcon = () => /* @__PURE__ */ React.createElement(\n  \"svg\",\n  {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"16\",\n    height: \"16\",\n    fill: \"currentColor\",\n    className: \"bi bi-trash\",\n    viewBox: \"0 0 16 16\"\n  },\n  /* @__PURE__ */ React.createElement(\"path\", { d: \"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z\" }),\n  /* @__PURE__ */ React.createElement(\"path\", { d: \"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z\" })\n);\n\n// src/uploadImage.ts\nimport { getDownloadURL, ref, uploadBytesResumable } from \"firebase/storage\";\nvar uploadImage = async ({\n  file,\n  storage,\n  isProd = false,\n  path = \"Images\"\n}) => {\n  if (typeof file === \"string\") return file;\n  let _path = path.endsWith(\"/\") ? path.slice(0, -1) : path;\n  if (!_path.trim().length) _path = \"Images\";\n  const fullPath = `${isProd ? \"\" : \"DEV/\"}${_path}/${file.name}`;\n  const storageRef = ref(storage, fullPath);\n  const uploadTask = uploadBytesResumable(storageRef, file);\n  await uploadTask;\n  const url = await getDownloadURL(uploadTask.snapshot.ref);\n  return url;\n};\n\n// src/index.tsx\nvar index_default = ReactImagePicker;\nexport {\n  ReactImagePicker,\n  index_default as default,\n  uploadImage\n};\n","import * as React from \"react\";\nimport Dropzone from \"dropzone\";\nimport { Fab, Stack, Typography } from \"@mui/material\";\nimport { useDropzone } from \"react-dropzone\";\nimport { LocalImageType, ReactImagePickerProps } from \"./types\";\n\nDropzone.autoDiscover = false;\n\n/**\n * A React component for selecting and displaying images using a drag-and-drop interface.\n *\n * @param {Object} props - The component props.\n * @param {(File | string)[]} [props.initImage] - Initial images to display.\n * @param {(images: (File | string)[]) => void} props.onImageChange - Callback triggered when the image list changes.\n * @param {number} [props.maxFiles=1] - Maximum number of files that can be selected.\n * @param {string} [props.label] - The label displayed for the image picker.\n * @param {string} [props.description] - Additional text to describe the image picker.\n * @param {React.ReactNode} [props.deleteIcon] - Custom delete icon to be used.\n * @param {string} [props.deleteBtnColor=\"#f44336\"] - Color of the delete button.\n * @param {string} [props.deleteIconColor=\"#ffffff\"] - Color of the delete icon.\n * @param {(props: LocalImageType) => React.ReactNode} [props.localImage] - Custom component to render images.\n * @param {boolean} [props.hideTitle=false] - Flag to hide the title.\n * @param {string} [props.sectionGap=\"15px\"] - Gap between sections (ex: title, description, images, etc...) in pixels.\n * @param {string} [props.imageGap=\"10px\"] - Gap between images in pixels.\n * @param {number} [props.imageGridCount=3] - The number of images to display in the grid.\n * @param {string} [props.imageBorderRadius=\"15px\"] - The border radius of the images.\n * @returns {JSX.Element} The ReactImagePicker component.\n */\nexport const ReactImagePicker: React.FC<ReactImagePickerProps> = ({\n  initImages = [],\n  onImageChange,\n  maxFiles = 1,\n  label = \"Images\",\n  description,\n  deleteIcon,\n  deleteBtnColor = \"#f44336\",\n  deleteIconColor = \"#ffffff\",\n  localImage,\n  hideTitle = false,\n  sectionGap = \"15px\",\n  imageGap = \"10px\",\n  imageGridCount = 3,\n  imageBorderRadius = \"15px\",\n  sx,\n  ...props\n}) => {\n  /**\n   * IMAGES SELECTED BY THE USER\n   */\n  const [files, setFiles] = React.useState<(File | string)[]>(initImages);\n  const { getRootProps, getInputProps } = useDropzone({\n    accept: { \"image/*\": [] },\n    minSize: 1024,\n    maxFiles: maxFiles,\n    multiple: maxFiles === 1 ? false : true,\n    onDropRejected(fileRejections, event) {\n      const multipleText =\n        fileRejections.length > 1\n          ? \"Fichiers ont été réfusés\"\n          : \"Fichier a été réfusé\";\n\n      alert(`${fileRejections.length} ${multipleText}.`);\n    },\n\n    onDrop: (acceptedFiles) => {\n      const newList = [\n        ...files,\n        ...acceptedFiles\n          .map((file) =>\n            Object.assign(file, {\n              preview: URL.createObjectURL(file),\n            })\n          )\n          .filter(\n            (file) =>\n              files.filter((_file: File | string) => {\n                if (typeof _file === \"string\") return false;\n\n                return _file.name === file.name;\n              }).length === 0\n          ),\n      ];\n      /**\n       * CHANGE THE LOCAL VERSION OF THE IMAGES\n       */\n      setFiles(newList);\n\n      /**\n       * CHANGE THE PARENT VERSION TOO\n       */\n      if (onImageChange) {\n        onImageChange(newList);\n      }\n    },\n  });\n\n  /**\n   * USED FOR PERFORMANCE\n   */\n  React.useEffect(\n    () => () => {\n      // Make sure to revoke the data uris to avoid memory leaks\n      files.forEach((file) => URL.revokeObjectURL((file as any).preview));\n    },\n    [files]\n  );\n\n  const reachedLimit = files.length >= maxFiles;\n\n  let gridTemplateColumns = `repeat(${imageGridCount}, 1fr)`;\n  let size = 115;\n\n  if (maxFiles === 1) {\n    gridTemplateColumns = \"1fr\";\n    size = 200;\n  }\n\n  if (maxFiles === 2) {\n    gridTemplateColumns = \"1fr 1fr\";\n    size = 175;\n  }\n\n  return (\n    <Stack\n      {...props}\n      sx={{\n        padding: \"20px\",\n        boxSizing: \"border-box\",\n        aspectRatio: 1,\n        width: 400,\n        ...sx,\n        \"& .dropzone\": { border: 0, p: 0 },\n        overflow: \"visible\",\n      }}\n    >\n      <Stack\n        {...(!reachedLimit ? getRootProps({ className: \"dropzone\" }) : {})}\n        spacing={sectionGap}\n        sx={{ cursor: reachedLimit ? \"auto\" : \"pointer\" }}\n      >\n        <input {...getInputProps()} />\n        {!hideTitle && (\n          <Typography\n            fontWeight={700}\n            fontSize=\"2rem\"\n            lineHeight=\"1em\"\n            textAlign=\"center\"\n          >\n            {label}\n          </Typography>\n        )}\n        <Typography\n          fontWeight={500}\n          fontSize=\"1rem\"\n          lineHeight=\"1.3em\"\n          textAlign=\"center\"\n        >\n          {description ??\n            (!reachedLimit\n              ? \"Vous pouvez ajouter les images en cliquant ici.\"\n              : \"Vous avez ajouté le maximum d'Images possible\")}\n        </Typography>\n        <Stack\n          display=\"grid\"\n          sx={{\n            gridTemplateColumns,\n            gap: imageGap,\n            maxHeight: 380,\n          }}\n        >\n          {files.map((file) => {\n            const fileIsString = typeof file === \"string\";\n\n            const _file = fileIsString\n              ? { name: file as string, preview: file as string }\n              : (file as File);\n\n            const src =\n              typeof _file === \"string\" ? _file : (_file as any).preview;\n\n            const imgProps: LocalImageType = {\n              src: src,\n              width: size,\n              height: size,\n              style: {\n                objectFit: \"cover\",\n                ...(maxFiles === 1 ? {} : { width: \"100%\", height: \"100%\" }),\n              },\n              alt: typeof _file === \"string\" ? _file : (_file as any).name,\n            };\n\n            return (\n              <Stack\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                display=\"flex\"\n                sx={{\n                  width: \"100%\",\n                  aspectRatio: maxFiles === 1 ? undefined : 1,\n                  borderRadius: imageBorderRadius,\n                  overflow: \"hidden\",\n                  position: \"relative\",\n                  margin: maxFiles === 1 ? \"auto\" : 0,\n                  // border: \"1px solid #ececf0\",\n                  boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px\",\n                }}\n                key={src}\n              >\n                {localImage ? localImage(imgProps) : <img {...imgProps} />}\n                <Stack\n                  alignItems=\"center\"\n                  justifyContent=\"center\"\n                  sx={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    borderRadius: imageBorderRadius,\n                    zIndex: 10,\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    bgcolor: \"rgba(255,255,255,0)\",\n                    backdropFilter: \"blur(0)\",\n                    transition: \"all linear 0.25s\",\n                    opacity: 0,\n\n                    \"&:hover\": {\n                      bgcolor: \"rgba(255,255,255,0.25)\",\n                      backdropFilter: \"blur(5px)\",\n                      opacity: 1,\n                    },\n                  }}\n                >\n                  <Fab\n                    size=\"small\"\n                    color=\"error\"\n                    sx={{\n                      boxShadow: \"none\",\n                      bgcolor: deleteBtnColor,\n                      color: deleteIconColor,\n                    }}\n                    onClick={(e) => {\n                      const _files = [\n                        ...files.filter((f) => {\n                          const isString = typeof f === \"string\";\n                          const name = isString\n                            ? (f as string)\n                            : (f as File).name;\n\n                          return name !== _file.name;\n                        }),\n                      ];\n\n                      setFiles(_files);\n\n                      onImageChange(_files);\n\n                      e.stopPropagation();\n                    }}\n                  >\n                    {deleteIcon ?? <DeleteIcon />}\n                  </Fab>\n                </Stack>\n              </Stack>\n            );\n          })}\n        </Stack>\n        <Typography variant=\"caption\" textAlign=\"center\">\n          {/* Chacune de vos images doit faire au plus 1Mb. <br /> Il vous faut\n          aussi noter que seul les images de format (.JPEG, .JPG, .PNG) sont\n          prise en compte.\n          <br /> */}\n          Le nombre maximum d&apos;image est {maxFiles}\n        </Typography>\n      </Stack>\n    </Stack>\n  );\n};\n\nconst DeleteIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    fill=\"currentColor\"\n    className=\"bi bi-trash\"\n    viewBox=\"0 0 16 16\"\n  >\n    <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z\" />\n    <path d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z\" />\n  </svg>\n);\n","import { getDownloadURL, ref, uploadBytesResumable } from \"firebase/storage\";\nimport { UploadImageType } from \"./types\";\n\n/**\n * Uploads a file to Firebase Storage and returns the download URL.\n * @param {File|string} file The file to upload, or the URL of the file\n * @param {FirebaseStorage} storage The Firebase Storage instance\n * @param {boolean} [isProd=false] Whether or not this is a production upload\n * @param {string} [path='Images'] The path to upload the file to\n * @returns {Promise<string>} The download URL of the uploaded file\n */\nexport const uploadImage: UploadImageType = async ({\n  file,\n  storage,\n  isProd = false,\n  path = \"Images\",\n}): Promise<string> => {\n  if (typeof file === \"string\") return file;\n\n  // The path is the full path including the filename, so we'll remove the trailing slash\n  let _path = path.endsWith(\"/\") ? path.slice(0, -1) : path;\n\n  // If the path is empty, we'll default to \"Images\"\n  if (!_path.trim().length) _path = \"Images\";\n\n  // The full path is the path plus the filename\n  const fullPath = `${isProd ? \"\" : \"DEV/\"}${_path}/${file.name}`;\n\n  // Create a reference to the file\n  const storageRef = ref(storage, fullPath);\n\n  // Start the upload\n  const uploadTask = uploadBytesResumable(storageRef, file);\n\n  // Wait for the upload to finish\n  await uploadTask;\n\n  // Get the download URL\n  const url = await getDownloadURL(uploadTask.snapshot.ref);\n\n  // Return the download URL\n  return url;\n};\n","import { ReactImagePicker } from \"./ReactImagePicker\";\n\nexport * from \"./types\";\n\nexport * from \"./uploadImage\";\n\nexport default ReactImagePicker;\n\nexport * from \"./ReactImagePicker\";\n"]}